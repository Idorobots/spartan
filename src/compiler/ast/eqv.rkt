#lang racket

;; AST equivalence checking.

(require "nodes.rkt")
(require "../errors.rkt")
(require "../utils/utils.rkt")

(provide ast-eqv? ast-list-eqv?)

(define (ast-eqv? a b)
  (cond ((and (list? a)
              (list? b))
         (ast-list-eqv? a b))
        ((and (ast-node? a)
              (ast-node? b)
              (equal? (ast-node-type a)
                      (ast-node-type b)))
         (case (ast-node-type a)
           ((number) (equal? (ast-number-value a)
                             (ast-number-value b)))
           ((symbol) (equal? (ast-symbol-value a)
                             (ast-symbol-value b)))
           ((string) (equal? (ast-string-value a)
                             (ast-string-value b)))
           ((list) (ast-list-eqv? (ast-list-values a)
                                  (ast-list-values b)))
           ((if) (and (ast-eqv? (ast-if-condition a)
                                (ast-if-condition b))
                      (ast-eqv? (ast-if-then a)
                                (ast-if-then b))
                      (ast-eqv? (ast-if-else a)
                                (ast-if-else b))))
           ((do) (ast-list-eqv? (ast-do-exprs a)
                                (ast-do-exprs b)))
           ((body) (ast-list-eqv? (ast-body-exprs a)
                                  (ast-body-exprs b)))
           ((lambda) (and (ast-list-eqv? (ast-lambda-formals a)
                                         (ast-lambda-formals b))
                          (ast-eqv? (ast-lambda-body a)
                                    (ast-lambda-body b))))
           ((let) (and (ast-list-eqv? (ast-let-bindings a)
                                      (ast-let-bindings b))
                       (ast-eqv? (ast-let-body a)
                                 (ast-let-body b))))
           ((letrec) (and (ast-list-eqv? (ast-letrec-bindings a)
                                         (ast-letrec-bindings b))
                          (ast-eqv? (ast-letrec-body a)
                                    (ast-letrec-body b))))
           ((fix) (and (ast-list-eqv? (ast-fix-bindings a)
                                      (ast-fix-bindings b))
                       (ast-eqv? (ast-fix-body a)
                                 (ast-fix-body b))))
           ((binding) (and (ast-eqv? (ast-binding-var a)
                                     (ast-binding-var b))
                           (ast-eqv? (ast-binding-val a)
                                     (ast-binding-val b))))
           ((const) (ast-eqv? (ast-const-value a)
                              (ast-const-value b)))
           ((quote quasiquote unquote unquote-splicing) (ast-eqv? (ast-quoted-expr a)
                                                                  (ast-quoted-expr b)))
           ((def) (and (ast-eqv? (ast-def-name a)
                                 (ast-def-name b))
                       (ast-eqv? (ast-def-value a)
                                 (ast-def-value b))))
           ((app) (and (ast-eqv? (ast-app-op a)
                                 (ast-app-op b))
                       (ast-list-eqv? (ast-app-args a)
                                      (ast-app-args b))))
           ((primop-app) (and (equal? (ast-primop-app-op a)
                                      (ast-primop-app-op b))
                              (ast-list-eqv? (ast-primop-app-args a)
                                             (ast-primop-app-args b))))
           ((<location>) (equal? (ast-node-location a)
                                 (ast-node-location b)))
           ((<error>) (ast-eqv? (ast-error-expr a)
                                (ast-error-expr b)))
           (else
            (compiler-bug "Unexpected expression: " a))))
        (else
         #f)))

(define (ast-list-eqv? a b)
  (and (equal? (length a)
               (length b))
       (every? (partial equal? #t)
               (map ast-eqv? a b))))
