#lang racket

(require "../testing.rkt")
(require "../../src/compiler/utils/gensym.rkt")
(require "../../src/compiler/passes/alpha-conversion.rkt")
(require "../../src/compiler/substitute.rkt")

;; Alpha conversion tests.

(describe
 "alpha-rename"

 (it "substitutes occurances for renamed symbols"
     (check ((s gen-valid-symbol)
             (sym (gen-symbol-node s))
             (another-symbol gen-valid-symbol-node)
             (const-symbol (gen-specific-const-node sym))
             (integer (gen-specific-const-node (gen-number-node gen-number)))
             (iff (gen-if-node integer sym another-symbol))
             (expected 'expected)
             (subs (make-subs `((,s . ,expected)))))
            (assert (alpha-rename subs integer)
                    integer)
            (assert (alpha-rename subs const-symbol)
                    const-symbol)
            (assert (alpha-rename subs another-symbol)
                    another-symbol)
            (assert-ast (alpha-rename subs sym)
                        (symbol renamed)
                        (assert renamed expected))
            (assert-ast (alpha-rename subs iff)
                        (if int
                            (symbol renamed)
                            another)
                        (assert int integer)
                        (assert another another-symbol)
                        (assert renamed expected))))

 (it "renames let bound variables correctly"
     (check ((sym1 (gen-symbol-node 'foo))
             (sym2 (gen-symbol-node 'bar))
             (b1 (gen-binding-node sym1 sym1))
             (b2 (gen-binding-node sym2 sym2))
             (body (gen-specific-do-node sym1 sym2))
             (bv (list 'foo 'bar))
             (let-node (gen-with-bv (gen-let-node (list b1 b2)
                                                  body)
                                    bv))
             (letrec-node (gen-with-bv (gen-letrec-node (list b1 b2)
                                                        body)
                                       bv))
             (fix-node (gen-with-bv (gen-fix-node (list b1 b2)
                                                  body)
                                    bv))
             (expected 'expected)
             (subs (make-subs `((foo . ,expected)
                                (bar . ,expected)))))
            (gensym-reset!)
            (assert-ast (alpha-rename subs let-node)
                        (let ((binding (symbol 'foo1) (symbol 'expected))
                              (binding (symbol 'bar2) (symbol 'expected)))
                          (do (symbol 'foo1)
                              (symbol 'bar2)))
                        (assert #t))
            (gensym-reset!)
            (assert-ast (alpha-rename subs letrec-node)
                        (letrec ((binding (symbol 'foo1) (symbol 'foo1))
                                 (binding (symbol 'bar2) (symbol 'bar2)))
                          (do (symbol 'foo1)
                              (symbol 'bar2)))
                        (assert #t))
            (gensym-reset!)
            (assert-ast (alpha-rename subs fix-node)
                        (fix ((binding (symbol 'foo1) (symbol 'foo1))
                              (binding (symbol 'bar2) (symbol 'bar2)))
                             (do (symbol 'foo1)
                                 (symbol 'bar2)))
                        (assert #t))))

 (it "renames formal lambda arguments"
     (check ((s 'foo)
             (sym (gen-symbol-node s))
             (let-node (gen-with-bv (gen-lambda-node (list sym) sym)
                                    (list s)))
             (expected 'expected)
             (subs (make-subs `((,s . ,expected)))))
            (gensym-reset!)
            (assert-ast (alpha-rename subs let-node)
                        (lambda ((symbol 'foo1))
                          (symbol 'foo1))
                        (assert #t))))

 (it "correctly handles wildcard symbols"
     (check ((sym1 (gen-symbol-node 'foo))
             (sym2 (gen-symbol-node 'bar))
             (wild (gen-symbol-node '_))
             (fun-node (gen-lambda-node (list sym1 wild sym2)
                                        (gen-specific-do-node sym1 sym2)))
             (b1 (gen-binding-node sym1 sym1))
             (b2 (gen-binding-node sym2 sym2))
             (b3 (gen-binding-node wild sym1))
             (let-node (gen-let-node (list b1 b3 b2)
                                     (gen-specific-do-node sym1 sym2)))
             (subs (make-subs '())))
            (gensym-reset!)
            (assert-ast (alpha-rename subs fun-node)
                        (lambda ((symbol 'foo1)
                                 (symbol '_)
                                 (symbol 'bar2))
                          (do (symbol 'foo1)
                              (symbol 'bar2)))
                        (assert #t))
            (gensym-reset!)
            (assert-ast (alpha-rename subs let-node)
                        (let ((binding (symbol 'foo1) _)
                              (binding (symbol '_) _)
                              (binding (symbol 'bar2) _))
                          (do (symbol 'foo1)
                              (symbol 'bar2)))
                        (assert #t)))))
