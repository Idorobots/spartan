(when)
(when #f)
(when 5 23)
(when 5 1 2 3)
(unless)
(unless #f)
(unless 5 23)
(unless 23 3 2 1)
(cond)
(cond (5 23))
(cond (5 23) (23 5))
(cond (5 23) (else 5))
(cond (else 5))
(cond (5 1 2 3) (else 23))
(cond (5 1 2 3) (else 1 2 3))
(cond (else 1 2 3) (5 1 2 3))
(and)
'(and)        ;; both
(quote (and)) ;; OK
(and 1)
(and 1 2)
(and 1 2 3 4 5)
(or)
(or 1)
(or 1 2)
(or 1 2 3 4 5)
(let*)
(let* ())
(let* () 23)
(let* ((_ 23)))
(let* ((foo 23)) foo)
(let* ((foo 23)) 5 foo)
(let* ((_ 23) (baz 5)) baz)
(let* ((foo 23) (baz 5)) baz foo)
(let* ((foo 23) baz) 23 5 foo)
(let* (foo bar) 5)
(letcc)
(letcc k)
(letcc k k)
(letcc k 1 2 3 k)
(letcc () 23)
(letcc (k) 23)
(letcc ((k 5)) 23)
(handle)
(handle 23)
(handle 23 5)
(handle 23 5 oops)
(shift)
(shift k)
(shift k k)
(shift k 1 2 3 k)
(shift () 23)
(shift (k) 23)
(shift ((k wut)) 5)
(reset)
(reset 5)
(reset 1 2 3)
(structure)
(structure x y z)
(structure (define foo 5))
(structure (define (foo x) x))
(structure (define (foo x) x)
           (define (bar y) y))
(structure (define (foo x) x)
           (define bar 23))
(module)
(module foo)
(module (foo))
(module ())
(module (bar _))
(module (baz) x)
(module (faz) x y z)
(module (foobar) (define foo 5))
(module (barbaz) (define (foo x) x))
(module (bazfaz)
  (define (foo x) x)
  (define (bar y) y))
(module (fazfoo bar)
  (define (foo x) (+ x bar)))
foo bar baz faz foobar barbaz bazfaz fazfoo
