(quote)
(quasiquote)
(unquote)
(unquote-splicing)
(quote 23)
(quasiquote 23)
(unquote 23)
(unquote-splicing 23)
(quote 23 5)
(quasiquote 1 2 3)
(unquote 23 4)
(unquote-splicing 1 2 3)
(quasiquote (unquote-splicing foo))
(if)
(if 23)
(if 23 5)
(if 1 2 3)
(if 1 2 3 4 5)
(do)
(do 1)
(do 1 2)
(let)
(let x)
(let ())
(let () 23)
(let x 23)
(let (x) 23)
(let ((23 x)) 23)
(let (()) 23)
(let ((x 23)) x)
(let ((x 23) y) x)
(let ((x 23) y z) x)
(letrec)
(letrec x)
(letrec ())
(letrec () 23)
(letrec x 23)
(letrec (x) 23)
(letrec ((23 x)) 23)
(letrec (()) 23)
(letrec ((x 23)) x)
(letrec ((x 23) y) x)
(letrec ((x 23) y z) x)
(lambda)
(lambda x)
(lambda ())
(lambda x 23)
(lambda () 23)
(lambda (x) x)
(lambda ((x y)) 23)
(lambda ((x) (y)) 23)
(lambda (23) 23)
(lambda ("some arg I dunno might delete") 23)
(define)
(define foo)
(define 23 foo)
(define foo 23)
(define () 23)
(define (bar) 23)
(define (bar1 x) x)
(define (bar))
(define (bar2 23) 5)
()
(foo)
((bar1))
(23)
((23))
((bar2 23) 5)
((define (faz x) x) 23)
((do 23 bar) 23)
((if 5 foo bar) 23)
("some function")
('foo 23)
((lambda (x) x) 23)
'x
`y
,z
,@wat
'(,z)
'(,@wat)
`,bar
`,@wat
